const { GoogleGenerativeAI } = require('@google/generative-ai');

async function generateImage({ hotelName, event, occasion }) {
  try {
    console.log('üîÑ Initializing Gemini for image generation...');
    
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY not found in environment variables');
    }
    
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp-image-generation" });

    const prompt = `
      Make a image of stunning, aesthetic scene that represents:
      - ${hotelName}
      - A "${event}" during the "${occasion}"

      Output a beautiful visual concept in one sentence.
    `;

    console.log('üîÑ Sending image generation prompt to Gemini...');
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: prompt }] }],
      generationConfig: {
        responseModalities: ['Text', 'Image']
      }
    });

    const response = result.response;
    let imageUrl = null;
    let text = '';
    let cloudinaryData = null;
    
    console.log('üîÑ Processing Gemini response...');
    
    if (response.candidates && 
        response.candidates[0] && 
        response.candidates[0].content && 
        response.candidates[0].content.parts) {
      
      for (const part of response.candidates[0].content.parts) {
        if (part.text) {
          text = part.text;
          console.log('‚úÖ Text part received from Gemini');
        } else if (part.inlineData) {
          console.log('‚úÖ Image part received from Gemini');
          const imageData = part.inlineData.data;
          const base64ImageUrl = `data:${part.inlineData.mimeType};base64,${imageData}`;
          
          // Set base64 as fallback
          imageUrl = base64ImageUrl;
          
          // Try to upload to Cloudinary if credentials are available
          if (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET) {
            try {
              console.log('üîÑ Attempting Cloudinary upload...');
              const { uploadImage } = require('./cloudinary');
              
              // Generate unique public ID
              const timestamp = Date.now();
              const publicId = `postjini_${hotelName.replace(/\s+/g, '_')}_${event.replace(/\s+/g, '_')}_${timestamp}`;
              
              // Upload to Cloudinary
              cloudinaryData = await uploadImage(base64ImageUrl, publicId);
              imageUrl = cloudinaryData.url; // Use Cloudinary URL instead of base64
              console.log('‚úÖ Image uploaded to Cloudinary successfully');
            } catch (error) {
              console.error('‚ùå Failed to upload to Cloudinary, using base64 fallback:', error.message);
              // Keep using base64 URL if Cloudinary fails
              imageUrl = base64ImageUrl;
              cloudinaryData = null; // Ensure cloudinaryData is null when upload fails
            }
          } else {
            console.log('‚ö†Ô∏è Cloudinary credentials not found, using base64 image');
            cloudinaryData = null; // Ensure cloudinaryData is null when credentials missing
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è No valid response structure from Gemini');
    }
    
    if (!imageUrl) {
      throw new Error('No image was generated by Gemini');
    }
    
    console.log('‚úÖ Image generation completed successfully');
    return { 
      text, 
      imageUrl,
      cloudinaryData // Include Cloudinary data for database storage
    };
    
  } catch (error) {
    console.error('‚ùå Error in generateImage:', error);
    console.error('Error details:', error.message);
    throw error; // Re-throw to be caught by the main handler
  }
}

module.exports = { generateImage };